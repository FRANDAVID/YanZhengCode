//
//  ViewController.m
//  yanZhengCode
//
//  Created by 王双龙 on 16/8/3.
//  Copyright © 2016年 王双龙. All rights reserved.
//

#import "ViewController.h"
#import "CaptchaView.h"
#import "NHGraphCoder.h"

#define dataStr


@interface ViewController ()
{
    CaptchaView * _captchaView1;
    CaptchaView * _captchaView2;
}

@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    //字符串验证码界面
    _captchaView1 = [[CaptchaView alloc] initWithFrame:CGRectMake(20, 40, 150, 40) WithType:DefaultType];
    [self.view addSubview:_captchaView1];
    
    //算数验证码
    _captchaView2 = [[CaptchaView alloc] initWithFrame:CGRectMake(20, 90, 150, 40) WithType:CountType];
    [self.view addSubview:_captchaView2];
    
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(190, 40, 100, 40)];
    label.text = @"点击图片换验证码";
    label.font = [UIFont systemFontOfSize:12];
    label.textColor = [UIColor grayColor];
    [self.view addSubview:label];
    
    
    //图片验证码
    UIImageView * imageView = [[UIImageView alloc] initWithFrame:CGRectMake(20, 150, 90, 40)];
    [self.view addSubview:imageView];
    NSData * data = [self transStrHexToData:dataStr];
    UIImage * image = [UIImage imageWithData:data];
    imageView.image = image;
    NSLog(@"%@",[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]);
    
    
    //滑块验证码
    //网络图片
//    NSString *url = @"http://pic.pimg.tw/loloto/1357207442-1350656755_l.jpg?v=1357207447";
//    NHGraphCoder *coder = [NHGraphCoder codeWithURL:url];
    
    //本地图片
    UIImage * image1 = [UIImage imageNamed:@"4.jpg"];
    NHGraphCoder *coder = [NHGraphCoder codeWithImage:image1];
    coder.center = CGPointMake(self.view.frame.size.width*0.5, self.view.frame.size.height*0.5 + 30);
    [coder handleGraphicCoderVerifyEvent:^(NHGraphCoder * _Nonnull cd, BOOL success) {
        
        NSString * resultStr ;
        if (success == 1) {
           resultStr = @"验证成功";
        }else{
            resultStr = @"验证失败";
            CAKeyframeAnimation *anim = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
            anim.repeatCount = 10;
            anim.values = @[@-20, @20, @-20];
            [coder.layer addAnimation:anim forKey:nil];
            [coder resetStateForDetect];
        }
        
        UIAlertController * alertController = [UIAlertController alertControllerWithTitle:@"提示" message:resultStr preferredStyle:UIAlertControllerStyleAlert];
        [self presentViewController:alertController animated:NO completion:nil];
        [UIView animateWithDuration:2 animations:^{
            [alertController dismissViewControllerAnimated:NO completion:nil];
        }];
        
    }];
    [self.view addSubview:coder];
}

/// 将服务器端传过来的十六进制的字符串转化为NSData
- (NSData *)transStrHexToData:(NSString *)strHex
{
    // bytes索引
    NSUInteger j = 0;
    
    NSInteger len = strHex.length;
    
    if (len % 2 == 1) {
        /// 若不能被2整除则说明16进制的字符串不满足图片图。特此说明，假如只是单纯的把十六进制转换为NSData就把这个if干掉即可，
        return nil;
    }
    
    // 动态分配内存
    Byte *bytes = (Byte *)malloc((len / 2 + 1) * sizeof(Byte));
    
    // 初始化内存 其中memset的作用是在一段内存块中填充某个给定的值，它是对较大的结构体或数组进行清零操作的一种最快方法
    memset(bytes, '\0', (len / 2 + 1) * sizeof(Byte));
    
    // for循环里面其实就是把16进制的字符串转化为字节数组的过程
    for (NSUInteger i = 0; i < strHex.length; i += 2) {
        
        // 一字节byte是8位(比特)bit 一位就代表一个0或者1(即二进制) 每8位(bit)组成一个字节(Byte) 所以每一次取2为字符组合成一个字节 其实就是2个16进制的字符其实就是8位(bit)即一个字节byte
        NSString *str = [strHex substringWithRange:NSMakeRange(i, 2)];
        
        // 将16进制字符串转化为十进制
        unsigned long uint_ch = strtoul([str UTF8String], 0, 16);
        
        bytes[j] = uint_ch;
        
        /// 自增
        j ++;
    }
    
    // 将字节数组转化为NSData
    NSData *data = [[NSData alloc] initWithBytes:bytes length:len / 2];
    
    // 释放内存
    free(bytes);
    
    return data;
    
}




- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end
